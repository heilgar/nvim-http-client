*http_client.txt* A Neovim plugin for running HTTP requests from .http files

==============================================================================
CONTENTS                                              *http_client-contents*

1. Usage ................ |http_client-usage|
2. Commands ............. |http_client-commands|
3. Keybindings .......... |http_client-keybindings|
4. Configuration ........ |http_client-configuration|
5. Telescope Integration  |http_client-telescope|
6. HTTP Versions ........ |http_client-http-versions|
7. SSL Configuration ... |http_client-ssl-config|
8. Environment Files ... |http_client-environment-files|
9. Response Handlers ... |http_client-response-handlers|
10. Global Variables ... |http_client-global-variables|

==============================================================================
USAGE                                                    *http_client-usage*

This plugin allows you to run HTTP requests directly from .http files, with
support for environment variables, response handlers, and global variables.

1. Create a .http file with your HTTP requests.
2. Create a .env.json file with your environments.
3. Use the provided commands to select an environment and run requests.

------------------------------------------------------------------------------
COMMANDS                                              *http_client-commands*

:HttpEnvFile                                                   *:HttpEnvFile*
    Select an environment file (.env.json) to use.

:HttpEnv                                                           *:HttpEnv*
    Set the current environment to use.

:HttpRun                                                           *:HttpRun*
    Run the HTTP request under the cursor.

:HttpStop                                                         *:HttpStop*
    Stop the currently running HTTP request.

:HttpVerbose                                                   *:HttpVerbose*
    Toggle verbose mode for debugging.

:HttpDryRun                                                     *:HttpDryRun*
    Perform a dry run of the request under the cursor.

:HttpRunAll                                                     *:HttpRunAll*
    Run all HTTP requests in the current file.

:HttpCopyCurl                                                 *:HttpCopyCurl*
    Copy the curl command for the HTTP request under the cursor.

------------------------------------------------------------------------------
KEYBINDINGS                                        *http_client-keybindings*

The plugin comes with the following default keybindings:

<leader>he                                       *http_client-select-env-file*
    Select environment file

<leader>hs                                            *http_client-set-env*
    Set current environment

<leader>hr                                            *http_client-run*
    Run HTTP request under cursor

<leader>hx                                            *http_client-stop*
    Stop running HTTP request

<leader>hv                                            *http_client-verbose*
    Toggle verbose mode

<leader>hd                                            *http_client-dry-run*
    Perform dry run

<leader>hc                                          *http_client-copy-curl*
    Copy curl command for the HTTP request under cursor

To customize these keybindings, you can pass a 'keybindings' table to the
setup function in your Neovim configuration:
>
    require("http_client").setup({
      keybindings = {
        select_env_file = "<leader>he",
        set_env = "<leader>hs",
        run_request = "<leader>hr",
        stop_request = "<leader>hx",
        toggle_verbose = "<leader>hv",
        dry_run = "<leader>hd",
      },
    })

Replace the key combinations with your preferred bindings.

------------------------------------------------------------------------------
CONFIGURATION                                    *http_client-configuration*

The plugin can be configured by passing a table to the setup function:

>
    require("http_client").setup({
      default_env_file = '.env.json',
      request_timeout = 30000, -- 30 seconds
      split_direction = "right",
      keybindings = {
        select_env_file = "<leader>he",
        set_env = "<leader>hs",
        run_request = "<leader>hr",
        stop_request = "<leader>hx",
        dry_run = "<leader>hd",
        toggle_verbose = "<leader>hv"
      },
    })


default_env_file                              *http_client-default_env_file*
    The default environment file to use.
    Default: '.env.json'

request_timeout                               *http_client-request_timeout*
    The timeout for HTTP requests in milliseconds.
    Default: 30000 (30 seconds)

split_direction                                *http_client-split_direction*
    Determines the direction in which the response buffer will open.
    Possible values: "right", "left", "below", "above"
    Default: "right"

keybindings                                      *http_client-config-keybindings*
    A table of keybindings for various plugin actions.
    See |http_client-keybindings| for more details on the available actions.

------------------------------------------------------------------------------
TELESCOPE INTEGRATION                        *http_client-telescope*

This plugin includes Telescope integration for selecting environment files
and environments:

:Telescope http_client http_env_files
    Select an environment file

:Telescope http_client http_envs
    Select an environment

------------------------------------------------------------------------------
HTTP VERSIONS                                        *http_client-http-versions*

The plugin supports specifying different HTTP versions for requests:

- `HTTP/1.1`: Default version if not specified
- `HTTP/2`: Enable the use of HTTP/2
- `HTTP/2 (Prior Knowledge)`: Use HTTP/2 without HTTP/1.1 Upgrade

Example usage:
>
    GET https://example.com HTTP/2
    User-Agent: MyHttpClient/1.0

    ###

    POST https://example.com HTTP/2 (Prior Knowledge)
    Content-Type: application/json

    {
        "key": "value"
    }

------------------------------------------------------------------------------
SSL CONFIGURATION                                *http_client-ssl-config*

For development purposes, you may need to disable certificate verification
for hosts with self-signed or expired certificates. You can do this by
adding an SSL configuration to your environment file.

In your http-client.private.env.json file, add the following:

    {
        "your_environment_name": {
            "SSLConfiguration": {
                "verifyHostCertificate": false
            }
        }
    }

When this environment is active, the HTTP client will not verify host
certificates for requests.

Note: Only use this feature for trusted hosts in development environments.
Disabling certificate verification can pose security risks in production.

------------------------------------------------------------------------------
ENVIRONMENT FILES                            *http_client-environment-files*

Environment files (.env.json) allow you to define different sets of variables
for your HTTP requests. The plugin will look for these files in your project
root directory.

The "*default" environment is used as a base, and other environments will
override its values.

Example .env.json file:
>
    {
        "*default": {
            "host": "http://localhost:3000"
        },
        "production": {
            "host": "https://api.example.com"
        }
    }

Private environment files (.private.env.json) can be used for sensitive
information and are automatically ignored by git.

------------------------------------------------------------------------------
RESPONSE HANDLERS                            *http_client-response-handlers*

Response handler scripts allow you to perform actions after receiving a
response. You can use these scripts to set global variables, process data,
or perform any other post-request operations.

To add a response handler script, use the following syntax in your .http file:
>
    ### My Request
    GET http://api.example.com/data

    > {%
    client.global.set("my_variable", response.body.some_value);
    %}

The script inside {% %} will be executed after the response is received.

------------------------------------------------------------------------------
GLOBAL VARIABLES                              *http_client-global-variables*

Global variables can be set using response handler scripts and persist across
requests within the same Neovim session. They can be used in subsequent
requests just like environment variables.

To set a global variable:
>
    client.global.set("variable_name", "value");

To use a global variable in a request:
>
    GET http://api.example.com/{{variable_name}}

Global variables take precedence over environment variables with the same name.

------------------------------------------------------------------------------
RUNNING WITHOUT ENVIRONMENT                 *http_client-no-environment*

The plugin now allows running requests without selecting an environment file.
If environment variables are needed but not set, a message will be displayed
suggesting to select an environment file or set properties via a response
handler.

Dry runs can be executed even if no environment file is selected. In this case,
a warning will be displayed in the dry run output if environment variables are
needed but not set.

------------------------------------------------------------------------------
COMMENTS                                              *http_client-comments*

The plugin now supports comments in .http and .rest files. Comments can be used
to add explanations or temporarily disable parts of requests.

- Full line comments start with '#' at the beginning of the line
- Inline comments start with '#' and continue to the end of the line

Examples:

# This is a full line comment
GET https://api.example.com/users # This is an inline comment

Comments are ignored when parsing and executing requests.

==============================================================================
vim:ft=help:et:ts=4:sw=4:sts=4:norl:

